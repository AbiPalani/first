to read:
1)Statically typed and Dynamically typed Languages:
Statically typed:
  * A language is statically typed if the type of a variable is known at compile time, that is the programmer must specify what type each variable is.

  * The main advantage here is that all kinds of checking can be done by the compiler, and therefore a lot of trivial bugs are caught at a very early stage.

  * In a statically typed language variables' types are static, meaning once you set a variable to a type, you cannot change it. That is because typing is associated with the variable rather than the value it refers to.

Examples: C, C++, Java, Rust, Go, Scala.

Dynamically typed:
  * A language is dynamically typed if the type is associated with run-time values, and not named variables/fields/etc.,that is a programmer can write a little quicker because you do not have to specify types every time.
  
  * In a dynamically typed language variables' types are dynamic, meaning after you set a variable to a type, you CAN change it. That is because typing is associated with the value it assumes rather than the variable itself. 

Examples: Perl, Ruby, Python, PHP, JavaScript, Erlang.

Most scripting languages have this feature as there is no compiler to do static type-checking anyway, but you may find yourself searching for a bug that is due to the interpreter misinterpreting the type of a variable. 

Most dynamically typed languages do allow you to provide type information, but do not require it. One language that is currently being developed, Rascal, takes a hybrid approach allowing dynamic typing within functions but enforcing static typing for the function signature.


2)Scripting vs Programming Languages:
Scripting:
   * Scripting languages are programming languages that don't require an explicit compilation step.

   * A scripting language is used to write code that is going to target a software system. It's going to automate operations on that software system.

Programming:
   * Programming Language is compiled to machine code and run on the hardware of the underlying Operating System.

   * A programming language targets the computing system, which can be a real or virtual machine. The instructions are executed by the machine.


Scripting languages are not compiled to machine code by the user,Some programming languages that are not scripting are compiled to machine code, and is subsequently run.


Difference between HTTP1.1 and HTTP2:
HTTP1.1:
	* The contents of each stream are HTTP 1.1 requests and responses, just encoded and packed up differently.
	* HTTP/1.1 was the major version of HTTP network protocol used by the World Wide Web, implemented across clients and servers
	* The problem with HTTP/1.1 is the duplication of data across requests,too many requests means too much redundant data, which would impact performance.

HTTP2:
	* HTTP2 adds a number of features to manage the streams, but leaves old semantics untouched.
	* HTTP 2.0 is a binary protocol that multiplexes numerous streams going over a single TCP connection.
	* Allows using same TCP connection for multiple parallel requests,Compressed headers, reduced data redundancy.